	Definir las clases Controller, invoker, PolicyManager, etc.. peara simular la ejecucion de funciones en un FAAS.

Creen un functions as a service. OpenWhisk: dos components
	-controller: en un sistema FAAS tan sons n'hi ha un. Decideix  com es reparteixen les peticions entre els invokers que tinc. Implementar gestor. (Policy Manager). Reparteix la carrega.
	-invoker: rep peticions del controller per executar funcions. reserva els recursos necessaris (memoria) i els executa. A l'invoker l'hi passem la RAM que utilitzarem per parametre per realitzar la funcio.
	Interficie Action:
	-
	!!Si no tenim recursos per executar les funcions amb els recursos que tenim o deneguem la peticio o esperem a tenir els recursos.!!
	Multithreading:
	-
	PolicyManager: ens indica quina politica utilitzem per executar les nostres funcions.

	-"De manera transparent": no conec la implementacio pero ho utilitzo.
	-Cache de Decorator: guardo a la cache els parametres d'entrada, el resultat, i el metode. Per crides posteriors, primer buscare el resultat a la cache i si no existeix llavors executem la funcio.
	diccionario de Acciones y diccionario de parametros.
	Dict<Action, >

	-proxy: capturem la invocacio abans que li arribi al controller. (ActionProxy): translateActionToId(): rep el nom de l'accio i ho tradueix a una Id. (Diccionari d-accions i keys (id)).
	El callMethod passa la id i els parametres al Controller.
	D'aquesta forma, l'ActionProxy reb una estructura de dades amb totes les id segons les Actions.
	
	Unit testing testea cada unidad de nuestro proyecto (una funcion).
